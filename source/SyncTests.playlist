<Playlist Version="1.0"><Add Test="LiteDB.Sync.Tests.Unit.Internal.PatchTests+WhenCombiningPatches.ShouldContainLastChangeWhenEntityWasChangedMultipleTimes" /><Add Test="LiteDB.Sync.Tests.Unit.Internal.PatchTests+WhenCombiningPatches.ShouldNotMergeSameIdsInDifferentCollections" /><Add Test="LiteDB.Sync.Tests.Unit.Internal.PatchTests+WhenSerializing.ShouldSerializeAndDeserialize" /><Add Test="LiteDB.Sync.Tests.Unit.Internal.PatchTests+WhenAddingChanges.ShouldContainAddedDeletes" /><Add Test="LiteDB.Sync.Tests.Unit.Internal.PatchTests+WhenCombiningPatches.ShouldContainChangeIfEntityWasRecreated" /><Add Test="LiteDB.Sync.Tests.Unit.Internal.PatchTests+WhenAddingChanges.ShouldContainAddedChanges" /><Add Test="LiteDB.Sync.Tests.Unit.Internal.PatchTests+WhenCombiningPatches.ShouldContainDeleteIfEntityWasLastDeleted" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingById.ShouldReturnItemIfFound" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingle.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingle.ShouldUpdateExistingItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingBulk.ShouldInsertItems" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncDatabaseTests+WhenGettingTypedCollectionWithName.ShouldThrowWhenGettingNonSyncedEntityTypeOnSyncedCollection" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncDatabaseTests+WhenGettingBsonCollection.ShouldReturnSyncCollectionForSynced" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingMultipleByQuery.ShouldNotReturnSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingBulk.ShouldRemoveDeletedEntitiesOnPartialFailure" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenCheckingExistsByQuery.ShouldReturnTrueIfAtLeastOneExists" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByQuery.DeletedEntitiesShouldContainIdEvenIfDeletingByOtherField" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingMultipleByPredicate.ShouldNotReturnSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByPredicate.ShouldCreateDeletedEntities" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingMultiple.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingSingleWithExplicitId.ShouldInsertItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingSingle.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingSingle.ShouldInsertItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenCheckingExistsByPredicate.ShouldReturnTrueIfAtLeastOneExists" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingMultiple.ShouldInsertItems" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingAll.ShouldReturnAllItems" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingBulk.ShouldRemoveDeletedEntities" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncDatabaseTests+WhenGettingTypedCollectionWithAutoName.ShouldReturnNativeCollectionForNonSynced" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenCountingWithQuery.ShouldIgnoreSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenCountingWithPredicate.ShouldIgnoreSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncDatabaseTests+WhenGettingTypedCollectionWithAutoName.ShouldThrowWhenGettingNonSyncedEntityTypeOnSyncedCollection" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingSingleItem.ShouldCreateDeletedEntityRecord" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingOneByPredicate.ShouldReturnFirstItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingleWithExplicitId.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncDatabaseTests+WhenGettingTypedCollectionWithName.ShouldReturnSyncCollectionForSynced" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingMultiple.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenLongCountingWithQuery.ShouldIgnoreSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByQuery.ShouldReturnZeroIfNoItemsMatch" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByQuery.ShouldCreateDeletedEntities" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByQuery.ShouldReturnDeleteEntityIds" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncDatabaseTests+WhenGettingBsonCollection.ShouldReturnNativeCollectionForNonSynced" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenCheckingExistsByQuery.ShouldReturnFalseIfNonExists" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingleWithExplicitId.ShouldInsertNonExistingItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpdatingMultiple.ShouldSetRequiresSync" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenCheckingExistsByPredicate.ShouldReturnFalseIfNonExists" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpdatingSingleWithExplicitId.ShouldSetRequiresSync" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByPredicate.DeletedEntitiesShouldContainIdEvenIfDeletingByOtherField" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncDatabaseTests+WhenGettingTypedCollectionWithName.ShouldReturnNativeCollectionForNonSynced" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpdatingSingle.ShouldSetRequiresSync" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingMultiple.ShouldInsertNonExistingItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingMultiple.ShouldUpdateExistingItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingle.ShouldInsertNonExistingItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingSingleWithExplicitId.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingleWithExplicitId.ShouldUpdateExistingItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingSingleItem.ShouldNotCreateDeletedEntityWhenOriginalEntityNotExist" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenCountingAll.ShouldReturnCount" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByPredicate.ShouldReturnDeleteEntityIds" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncDatabaseTests+WhenGettingTypedCollectionWithAutoName.ShouldReturnSyncCollectionForSynced" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenLongCountingAll.ShouldReturnCount" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingOneByQuery.ShouldReturnFirstItem" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByPredicate.ShouldReturnZeroIfNoItemsMatch" /><Add Test="LiteDB.Sync.Tests.Unit.LiteSyncCollection.LiteSyncCollectionTests+WhenLongCountingWithPredicate.ShouldIgnoreSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncConflictTests+WhenCreating.ShouldFailIfChangesHaveDifferentEntityId" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenGettingBsonDocCollection.ShouldReturnNativeCollectionIfNotSynced" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenGettingBsonDocCollection.ShouldReturnSyncCollectionIfSynced" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenGettingCollectionByType.ShouldReturnSyncCollectionIfSynced" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenGettingCollectionByTypeAndName.ShouldReturnNativeCollectionIfNotSynced" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncConflictTests+WhenResolving.ShouldSetResolutionWhenKeepingRemote" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenGettingDeletedEntitiesCollection.CollectionShouldHaveCorrectName" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenGettingCollectionByType.ShouldReturnNativeCollectionIfNotSynced" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncConflictTests+WhenResolving.ShouldSetResolutionWhenKeepingLocal" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenGettingCollectionByType.ShouldThrowIfRegisteredAsSyncButTypeDoesNotImplementInterface" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenSynchronizing.Placeholder" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenGettingCollectionByTypeAndName.ShouldReturnSyncCollectionIfSynced" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncConflictTests+WhenResolving.ShouldSetResolutionAndMergedEntityWhenKeepingMerged" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncDatabaseTests+WhenGettingCollectionByTypeAndName.ShouldThrowIfRegisteredAsSyncButTypeDoesNotImplementInterface" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithCustomIdGenerator.WithNoStateShouldReturnExistingRemoteStateWhenCreateAttemptConflicts" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeIntArray" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeDateTime" /><Add Test="LiteDB.Sync.Tests.Core.Internal.ExtensionsTests+WhenSavingLocalCloudState.ShouldSaveWithCorrectCollectionAndId" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenGettingHashCode.ShouldNotBeEqualWhenCollectionNameIsDifferent" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenCreating.MaxValueShouldThrow" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityChangeTests+WhenCreating.ShouldThrowOnUpsertWithNoEntity" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithCustomIdGenerator.WithNoStateShouldReturnExistingRemoteStateAndDownloadPatches" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenCreating.NullBsonValueShouldThrow" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PullResultTests+WhenHasChanges.ShouldReturnTrueIfPatchesHaveChanges" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PatchTests+WhenCombiningPatches.ShouldNotMergeSameIdsInDifferentCollections" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeDouble" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PatchTests+WhenSerializing.ShouldSerializeAndDeserialize" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeString" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenComparingWithEqualsOperator.ShouldNotBeEqualWhenCollectionIdIsDifferent" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeDictionary" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityChangeTests+WhenApplying.UpsertChangeShouldUpsertEntity" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenComparingWithNotEqualsOperator.ShouldNotBeEqualWhenCollectionNameIsDifferent" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithBuiltinIdGenerator.WithNoStateShouldReturnExistingRemoteStateWhenCreateAttemptConflicts" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithCustomIdGenerator.WithStateShouldDownloadNewPatchAndUpdateState" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenCreating.NullCollectionShouldThrow" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeObjectId" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PatchTests+WhenAddingChanges.ShouldContainAddedDeletes" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeDecimal" /><Add Test="LiteDB.Sync.Tests.Core.Internal.ExtensionsTests+WhenGettingLocalCloudState.ShouldQueryCorrectCollectionAndId" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeBool" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithCustomIdGenerator.WithNoStateShouldReturnExistingRemoteState" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenComparingWithEqualsOperator.ShouldBeEqualWhenPropertiesAreEqual" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PatchTests+WhenCombiningPatches.ShouldContainDeleteIfEntityWasLastDeleted" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithBuiltinIdGenerator.WithNoStateShouldReturnExistingRemoteStateAndDownloadPatches" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithBuiltinIdGenerator.WithNoStateShouldCreateCloudState" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithBuiltinIdGenerator.WithStateShouldReturnNoChangeIfNoNewPatchIsAvailable" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenGettingHashCode.ShouldBeEqualWhenPropertiesAreEqual" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PullResultTests+WhenHasChanges.ShouldReturnFalseIsPatchesAreEmpty" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenGettingHashCode.ShouldNotBeEqualWhenCollectionIdIsDifferent" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithCustomIdGenerator.WithStateShouldReturnNoChangeIfNoNewPatchIsAvailable" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenComparingWithEqualsOperator.ShouldNotBeEqualWhenCollectionNameIsDifferent" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithBuiltinIdGenerator.WithStateShouldDownloadMultiplePatches" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeGuid" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenComparing.ShouldBeEqualWhenPropertiesAreEqual" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeBinary" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithCustomIdGenerator.WithNoStateShouldCreateCloudState" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenCreating.MinValueShouldThrow" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenComparingWithNotEqualsOperator.ShouldNotBeEqualWhenCollectionIdIsDifferent" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenComparingWithNotEqualsOperator.ShouldBeEqualWhenPropertiesAreEqual" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenComparing.ShouldNotBeEqualWhenCollectionIdIsDifferent" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityChangeTests+WhenApplying.DeleteChangeShouldDeleteEntity" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PatchTests+WhenCombiningPatches.ShouldContainLastChangeWhenEntityWasChangedMultipleTimes" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenCreating.EmptyCollectionShouldThrow" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PatchTests+WhenCombiningPatches.ShouldContainChangeIfEntityWasRecreated" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeInt64" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenCreating.NullValueShouldThrow" /><Add Test="LiteDB.Sync.Tests.Core.Internal.ExtensionsTests+WhenCheckingIsSyncEntityType.ShouldReturnFalseIfTypeDoesNotImplementInterface" /><Add Test="LiteDB.Sync.Tests.Core.Internal.ExtensionsTests+WhenCheckingIsSyncEntityType.ShouldReturnTrueIfTypeImplementsInterface" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithCustomIdGenerator.WithStateShouldDownloadMultiplePatches" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenConvertingToString.ShouldSerializeInt32" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithBuiltinIdGenerator.WithNoStateShouldReturnExistingRemoteState" /><Add Test="LiteDB.Sync.Tests.Core.Internal.CloudClientTests+WhenPullingWithBuiltinIdGenerator.WithStateShouldDownloadNewPatchAndUpdateState" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PullResultTests+WhenCreating.ShouldCombinePatches" /><Add Test="LiteDB.Sync.Tests.Core.Internal.EntityIdTests+WhenComparing.ShouldNotBeEqualWhenCollectionNameIsDifferent" /><Add Test="LiteDB.Sync.Tests.Core.Internal.PatchTests+WhenAddingChanges.ShouldContainAddedChanges" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingById.ShouldReturnItemIfFound" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingSingleWithExplicitId.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByQuery.DeletedEntitiesShouldContainIdEvenIfDeletingByOtherField" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByPredicate.ShouldCreateDeletedEntities" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingSingle.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingleWithExplicitId.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingMultipleByQuery.ShouldNotReturnSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenLongCountingWithPredicate.ShouldIgnoreSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpdatingSingleWithExplicitId.ShouldSetRequiresSync" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingMultiple.ShouldInsertItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByPredicate.DeletedEntitiesShouldContainIdEvenIfDeletingByOtherField" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingleWithExplicitId.ShouldUpdateExistingItem" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenCountingAll.ShouldReturnCount" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenLongCountingAll.ShouldReturnCount" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingBulk.ShouldRemoveDeletedEntities" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenCheckingExistsByPredicate.ShouldReturnTrueIfAtLeastOneExists" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingMultiple.ShouldInsertNonExistingItem" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingle.ShouldUpdateExistingItem" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingMultiple.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenLongCountingWithQuery.ShouldIgnoreSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingSingle.ShouldInsertItem" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingBulk.ShouldRemoveDeletedEntitiesOnPartialFailure" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingAll.ShouldReturnAllItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByPredicate.ShouldReturnZeroIfNoItemsMatch" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingle.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpdatingSingle.ShouldSetRequiresSync" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingSingleItem.ShouldCreateDeletedEntityRecord" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingMultiple.ShouldUpdateExistingItem" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingSingleWithExplicitId.ShouldInsertItem" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingMultipleByPredicate.ShouldNotReturnSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpdatingMultiple.ShouldSetRequiresSync" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenCountingWithQuery.ShouldIgnoreSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingMultiple.ShouldRemoveDeletedEntity" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenInsertingBulk.ShouldInsertItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByQuery.ShouldReturnZeroIfNoItemsMatch" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingle.ShouldInsertNonExistingItem" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenCountingWithPredicate.ShouldIgnoreSoftDeletedItems" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingItemsByQuery.ShouldCreateDeletedEntities" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenCheckingExistsByPredicate.ShouldReturnFalseIfNonExists" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenDeletingSingleItem.ShouldNotCreateDeletedEntityWhenOriginalEntityNotExist" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenUpsertingSingleWithExplicitId.ShouldInsertNonExistingItem" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenCheckingExistsByQuery.ShouldReturnTrueIfAtLeastOneExists" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenCheckingExistsByQuery.ShouldReturnFalseIfNonExists" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingOneByQuery.ShouldReturnFirstItem" /><Add Test="LiteDB.Sync.Tests.Core.LiteSyncCollection.LiteSyncCollectionTests+WhenFindingOneByPredicate.ShouldReturnFirstItem" /></Playlist>